{
	"info": {
		"_postman_id": "7efcb5ae-e7f1-495c-ae86-418b89726d65",
		"name": "Yoliday Assignment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36925279",
		"_collection_link": "https://api-pratice.postman.co/workspace/03b2a880-b895-43ac-87e9-a2a851e4b7cd/collection/36925279-7efcb5ae-e7f1-495c-ae86-418b89726d65?action=share&source=collection_link&creator=36925279"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "User TC#1 - Positive TestCase (Creates a new user with valid data)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"New User Created with Status code: 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"var id=pm.response.json()[\"id\"]\r",
									"pm.environment.set(\"id\",id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"lakshmi10\",\r\n  \"email\": \"lakshmi10@gmail.com\",\r\n  \"age\": 25\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{y_url}}users",
							"host": [
								"{{y_url}}users"
							]
						}
					},
					"response": []
				},
				{
					"name": "User TC#2 - Positive TestCase (Create user with valid  data with max value)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"New User Created with maximum value Status code: 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\":\"One morning, when Gregor Samsa woke from troubled dreams, he found himself transformed in his bed into a horrible vermin. He lay on his armour-like back, and if he lifted his head a little he could see his brown belly, slightly domed and divided by arches\",\r\n  \"email\": \"OnemorningwhenGregorSamsawokefromtroubleddreamshefoundhimselftransformedinhisbedintoahorribleverminHelayonhisarmourlikebackandifheliftedhisheadalittlehecouldseehisbrownbellyslightlydomedanddividedaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab@gmail.com\",\r\n  \"age\": 100\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{y_url}}users",
							"host": [
								"{{y_url}}users"
							]
						}
					},
					"response": []
				},
				{
					"name": "User TC#3 - Negative TestCase (Creates a new user with already existing emailid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"New User Created with already exisitng emailid Status code: 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Suraj\",\r\n  \"email\": \"mahesh@gmail.com\",\r\n  \"age\": 45\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{y_url}}users",
							"host": [
								"{{y_url}}users"
							]
						}
					},
					"response": []
				},
				{
					"name": "User TC#4 - Negative TestCase (Create user with invalid  data with more than max value)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"New User Created with maximum value Status code: 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\":\"One morning, when Gregor Samsa woke from troubled dreams, he found himself transformed in his bed into a horrible vermin. He lay on his armour-like back, and if he lifted his head a little he could see his brown belly, slightly domed and divided by arches45\",\r\n  \"email\": \"OnemorningwhenGregorSamsawokefromtroubleddreamshefoundhimselftransformedinhisbedintoahorribleverminHelayonhisarmourlikebackandifheliftedhisheadalittlehecouldseehisbrownbellyslightlydomedanddividedaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa45@gmail.com\",\r\n  \"age\": 145\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{y_url}}users",
							"host": [
								"{{y_url}}users"
							]
						}
					},
					"response": []
				},
				{
					"name": "User TC#5 - Negative TestCase (Create user without Required Field.)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Required Fields with status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"\",\r\n  \"email\": \"\",\r\n  \"age\": 0\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{y_url}}users",
							"host": [
								"{{y_url}}users"
							]
						}
					},
					"response": []
				},
				{
					"name": "User TC#6 - Negative TestCase (Create user with invalid format data)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Created user with invalid data with status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": 123,\r\n  \"email\": 123,\r\n  \"age\": \"gita\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{y_url}}users",
							"host": [
								"{{y_url}}users"
							]
						}
					},
					"response": []
				},
				{
					"name": "User TC#7 - Negative TestCase (Create user with invalid  data less than allowed value)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create user with invalid data with less than allowed data with Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"s\",\r\n  \"email\": \"s\",\r\n  \"age\": -1\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{y_url}}users",
							"host": [
								"{{y_url}}users"
							]
						}
					},
					"response": []
				},
				{
					"name": "User TC#8 - Positive TestCase (Get all Created Users.)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get All Created User with status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{y_url}}users",
							"host": [
								"{{y_url}}users"
							]
						}
					},
					"response": []
				},
				{
					"name": "User TC#9 - Positive TestCase (Get Created Users by id.)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get User by id with status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{y_url}}users/1",
							"host": [
								"{{y_url}}users"
							],
							"path": [
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "User TC#10 - Negative TestCase (Get Created Users by invalid id)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get All Created User with status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{y_url}}users/ad",
							"host": [
								"{{y_url}}users"
							],
							"path": [
								"ad"
							]
						}
					},
					"response": []
				},
				{
					"name": "User TC#11 - Positive TestCase (Update users with valid data)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Updated users with Status code: 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"seema3\",\r\n  \"email\": \"seema3@gmail.com\",\r\n  \"age\": 25\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{y_url}}users/6",
							"host": [
								"{{y_url}}users"
							],
							"path": [
								"6"
							]
						}
					},
					"response": []
				},
				{
					"name": "User TC#12 - Positive TestCase (Update user with valid  data with max value)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Updated product with maximum value Status code: 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\":\"One morning, when Gregor Samsa woke from troubled dreams, he found himself transformed in his bed into a horrible vermin. He lay on his armour-like back, and if he lifted his head a little he could see his brown belly, slightly domed and divided by mahesh\",\r\n  \"email\": \"OnemorningwhenGregorSamsawokefromtroubleddreamshefoundhimselftransformedinhisbedintoahorribleverminHelayonhisarmourlikebackandifheliftedhisheadalittlehecouldseehisbrownbellyslightlydomedanddividedaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaamahesh@gmail.com\",\r\n  \"age\": 100\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{y_url}}users/6",
							"host": [
								"{{y_url}}users"
							],
							"path": [
								"6"
							]
						}
					},
					"response": []
				},
				{
					"name": "User TC#13 - Negative TestCase (Update users with negative age)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User updated with negative age Status code: 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"seema3\",\r\n  \"email\": \"seema3@gmail.com\",\r\n  \"age\": -1\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{y_url}}users/6",
							"host": [
								"{{y_url}}users"
							],
							"path": [
								"6"
							]
						}
					},
					"response": []
				},
				{
					"name": "User TC#14 - Negative TestCase (Update user with invalid  data with more than max value) Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Update User with maximum value Status code: 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\":\"One morning, when Gregor Samsa woke from troubled dreams, he found himself transformed in his bed into a horrible vermin. He lay on his armour-like back, and if he lifted his head a little he could see his brown belly, slightly domed and divided by arches45\",\r\n  \"email\": \"OnemorningwhenGregorSamsawokefromtroubleddreamshefoundhimselftransformedinhisbedintoahorribleverminHelayonhisarmourlikebackandifheliftedhisheadalittlehecouldseehisbrownbellyslightlydomedanddividedaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa45@gmail.com\",\r\n  \"age\": 145\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{y_url}}users/7",
							"host": [
								"{{y_url}}users"
							],
							"path": [
								"7"
							]
						}
					},
					"response": []
				},
				{
					"name": "User TC#15 - Negative TestCase (Update user without Required Field.) Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Updated user without Required Fields with status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"\",\r\n  \"email\": \"\",\r\n  \"age\": 0\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{y_url}}users/7",
							"host": [
								"{{y_url}}users"
							],
							"path": [
								"7"
							]
						}
					},
					"response": []
				},
				{
					"name": "User TC#16 - Negative TestCase (Update user with invalid format data) Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Update user with invalid data with status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": 123,\r\n  \"email\": 123,\r\n  \"age\": \"gita\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{y_url}}users/7",
							"host": [
								"{{y_url}}users"
							],
							"path": [
								"7"
							]
						}
					},
					"response": []
				},
				{
					"name": "User TC#17 - Negative TestCase (Update user with invalid  data less than allowed value) Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Updated user with invalid data with less than allowed data with Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"\",\r\n  \"email\": \"\",\r\n  \"age\": 0\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{y_url}}users/7",
							"host": [
								"{{y_url}}users"
							],
							"path": [
								"7"
							]
						}
					},
					"response": []
				},
				{
					"name": "User TC#18 - Negative TestCase (Update user with invalid id) Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Updated user with invalid id with Status code: 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Mahesh Patil\",\r\n  \"email\": \"maheshpatil@gmail.com\",\r\n  \"age\": 40\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{y_url}}users/ab",
							"host": [
								"{{y_url}}users"
							],
							"path": [
								"ab"
							]
						}
					},
					"response": []
				},
				{
					"name": "User TC#19 - Negative TestCase (Delete user with invalid id)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete user with invalid id with Status code: 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{y_url}}users/ab",
							"host": [
								"{{y_url}}users"
							],
							"path": [
								"ab"
							]
						}
					},
					"response": []
				},
				{
					"name": "User TC#20 - Positive TestCase (Delete user with valid data)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete user having exisiting order with Status code: 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{y_url}}users/12",
							"host": [
								"{{y_url}}users"
							],
							"path": [
								"12"
							]
						}
					},
					"response": []
				},
				{
					"name": "User TC#21 - Positive TestCase (Delete user with valid data)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete user having no exisiting order with Status code: 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{y_url}}users/10",
							"host": [
								"{{y_url}}users"
							],
							"path": [
								"10"
							]
						}
					},
					"response": []
				},
				{
					"name": "User TC#22 - Positive TestCase (Delete user with invalid id)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete invalid userid with Status code: 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{y_url}}users/12",
							"host": [
								"{{y_url}}users"
							],
							"path": [
								"12"
							]
						}
					},
					"response": []
				},
				{
					"name": "User TC#23 - Integration Scenario TestCase (Get Created Users by id.)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get User by id with status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{y_url}}users/{{id}}",
							"host": [
								"{{y_url}}users"
							],
							"path": [
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User TC#24- IntegrationScenario TestCase (Update user with valid data)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Updated user with Status code: 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Disha\",\r\n  \"email\": \"abc11@gmail.com\",\r\n  \"age\": 40\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{y_url}}users/{{id}}",
							"host": [
								"{{y_url}}users"
							],
							"path": [
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User TC#25 - Integration ScenarioTestCase (Delete user with valid data having no exisiting order )",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete user having no exisiting order with Status code: 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{y_url}}users/{{id}}",
							"host": [
								"{{y_url}}users"
							],
							"path": [
								"{{id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Product",
			"item": [
				{
					"name": "Product TC#7 - Positive TestCase (Get all Products.)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get All Created User with status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{y_url}}products",
							"host": [
								"{{y_url}}products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product TC#8 - Positive TestCase (Get Product by id.)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get User by id with status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{y_url}}products/1",
							"host": [
								"{{y_url}}products"
							],
							"path": [
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product TC#9 - Negative TestCase (Get Product by invalid id)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get All Created User with status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{y_url}}products/ad",
							"host": [
								"{{y_url}}products"
							],
							"path": [
								"ad"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product TC#1 - Positive TestCase (Creates a new product with valid data)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"New Product Created with Status code: 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"var product_id=pm.response.json()[\"id\"]\r",
									"pm.environment.set(\"product_id\",product_id);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"tablet\",\r\n  \"description\": \"tablet 10\",\r\n  \"price\": 15000\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{y_url}}products",
							"host": [
								"{{y_url}}products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product TC#2 - Positive TestCase (Create product with valid  data with max value)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"New Product Created with maximum value Status code: 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\":\"One morning, when Gregor Samsa woke from troubled dreams, he found himself transformed in his bed into a horrible vermin. He lay on his armour-like back, and if he lifted his head a little he could see his brown belly, slightly domed and divided by arches\",\r\n  \"description\": \"OnemorningwhenGregorSamsawokefromtroubleddreamshefoundhimselftransformedinhisbedintoahorribleverminHelayonhisarmourlikebackandifheliftedhisheadalittlehecouldseehisbrownbellyslightlydomedanddividedaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab@gmail.com\",\r\n  \"price\": 100000000\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{y_url}}products",
							"host": [
								"{{y_url}}products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product TC#3 - Negative TestCase (Creates a new product with negative value)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"New Product Created with negative value Status code: 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"nut\",\r\n  \"description\": \"nut\",\r\n  \"price\": -1\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{y_url}}products",
							"host": [
								"{{y_url}}products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product TC#4 - Negative TestCase (Create product with invalid  data with more than max value)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"New Product Created with maximum value Status code: 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\":\"One morning, when Gregor Samsa woke from troubled dreams, he found himself transformed in his bed into a horrible vermin. He lay on his armour-like back, and if he lifted his head a little he could see his brown belly, slightly domed and divided by arches45\",\r\n  \"description\": \"OnemorningwhenGregorSamsawokefromtroubleddreamshefoundhimselftransformedinhisbedintoahorribleverminHelayonhisarmourlikebackandifheliftedhisheadalittlehecouldseehisbrownbellyslightlydomedanddividedaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa45@gmail.com\",\r\n  \"price\": 100000000000000000000\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{y_url}}products",
							"host": [
								"{{y_url}}products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product TC#5 - Negative TestCase (Create product without Required Field.)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Required Fields with status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"\",\r\n  \"description\": \"\",\r\n  \"price\": 0\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{y_url}}products",
							"host": [
								"{{y_url}}products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product TC#6 - Negative TestCase (Create product with invalid format data)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Created product with invalid data with status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": 123,\r\n  \"description\": 123,\r\n  \"price\": \"gita\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{y_url}}products",
							"host": [
								"{{y_url}}products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product TC#11 - Positive TestCase (Update product with valid data)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Updated product with Status code: 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Fridge\",\r\n  \"description\": \"Fridge200 litres\",\r\n  \"price\": 40000\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{y_url}}products/10",
							"host": [
								"{{y_url}}products"
							],
							"path": [
								"10"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product TC#12 - Positive TestCase (Update product with valid  data with max value)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Updated product with maximum value Status code: 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\":\"One morning, when Gregor Samsa woke from troubled dreams, he found himself transformed in his bed into a horrible vermin. He lay on his armour-like back, and if he lifted his head a little he could see his brown belly, slightly domed and divided by mahesh\",\r\n  \"description\": \"OnemorningwhenGregorSamsawokefromtroubleddreamshefoundhimselftransformedinhisbedintoahorribleverminHelayonhisarmourlikebackandifheliftedhisheadalittlehecouldseehisbrownbellyslightlydomedanddividedaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaamahesh@gmail.com\",\r\n  \"price\": 100000000000\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{y_url}}products/7",
							"host": [
								"{{y_url}}products"
							],
							"path": [
								"7"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product TC#13 - Negative TestCase (Update product with negative price)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Product updated with negative price Status code: 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"TV\",\r\n  \"description\": \"TV 20 pieces\",\r\n  \"price\": -45\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{y_url}}products/10",
							"host": [
								"{{y_url}}products"
							],
							"path": [
								"10"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product TC#14 - Negative TestCase (Update product with invalid  data with more than max value)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Update product with maximum value Status code: 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\":\"One morning, when Gregor Samsa woke from troubled dreams, he found himself transformed in his bed into a horrible vermin. He lay on his armour-like back, and if he lifted his head a little he could see his brown belly, slightly domed and divided by arches45\",\r\n  \"description\": \"OnemorningwhenGregorSamsawokefromtroubleddreamshefoundhimselftransformedinhisbedintoahorribleverminHelayonhisarmourlikebackandifheliftedhisheadalittlehecouldseehisbrownbellyslightlydomedanddividedaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa45@gmail.com\",\r\n  \"price\": 1000000000000000\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{y_url}}products/7",
							"host": [
								"{{y_url}}products"
							],
							"path": [
								"7"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product TC#15 - Negative TestCase (Update product without Required Field.)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Updated user without Required Fields with status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"\",\r\n  \"description\": \"\",\r\n  \"price\": null\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{y_url}}products/7",
							"host": [
								"{{y_url}}products"
							],
							"path": [
								"7"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product TC#16 - Negative TestCase (Update product with invalid format data)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Update product with invalid data with status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": 123,\r\n  \"description\": 123,\r\n  \"price\": \"gita\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{y_url}}products/7",
							"host": [
								"{{y_url}}products"
							],
							"path": [
								"7"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product TC#17 - Negative TestCase (Update product with invalid id)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Updated user with invalid id with Status code: 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Mahesh Patil\",\r\n  \"email\": \"maheshpatil@gmail.com\",\r\n  \"age\": 40\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{y_url}}products/ab",
							"host": [
								"{{y_url}}products"
							],
							"path": [
								"ab"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product TC#18 - Negative TestCase (Delete product with invalid data)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete product with invalid id with Status code: 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{y_url}}product/ab",
							"host": [
								"{{y_url}}product"
							],
							"path": [
								"ab"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product TC#19 - Positive TestCase (Delete product with valid data)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete user having exisiting order with Status code: 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{y_url}}users/8",
							"host": [
								"{{y_url}}users"
							],
							"path": [
								"8"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product TC#20 - Positive TestCase (Delete product with valid data having no exisiting order )",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete product having no exisiting order with Status code: 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{y_url}}products/10",
							"host": [
								"{{y_url}}products"
							],
							"path": [
								"10"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product TC#21 - Negative TestCase (Delete product with invalid product id)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete product with invalid productid with Status code: 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{y_url}}products/10",
							"host": [
								"{{y_url}}products"
							],
							"path": [
								"10"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product TC#22 - Integration Scenario TestCase (Get Created product by id.)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get product by id with status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{y_url}}products/{{product_id}}",
							"host": [
								"{{y_url}}products"
							],
							"path": [
								"{{product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product TC#23- IntegrationScenario TestCase (Update product with valid data)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Updated product with Status code: 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Laptop\",\r\n  \"description\": \"Laptop HP 15 inch\",\r\n  \"price\": 50000\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{y_url}}products/{{product_id}}",
							"host": [
								"{{y_url}}products"
							],
							"path": [
								"{{product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product TC#24 - Integration ScenarioTestCase (Delete product with valid data having no exisiting order )",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete product having no exisiting order with Status code: 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{y_url}}products/{{product_id}}",
							"host": [
								"{{y_url}}products"
							],
							"path": [
								"{{product_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Order",
			"item": [
				{
					"name": "Orders TC#1 - Positive TestCase (Creates a new order with valid data)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"New order with Status code: 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"var order_id=pm.response.json()[\"id\"]\r",
									"pm.environment.set(\"order_id\",order_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"user_id\": 12,\r\n  \"product_id\": 15,\r\n  \"quantity\": 5\r\n}\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{y_url}}orders",
							"host": [
								"{{y_url}}orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Orders TC#2 - Positive TestCase (Create user with valid  data with max value)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"New Order Created with maximum value in quantity Status code: 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"user_id\": 13,\r\n  \"product_id\": 15,\r\n  \"quantity\": 10\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{y_url}}orders",
							"host": [
								"{{y_url}}orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Orders TC#3 - Negative TestCase (Creates a new order with no existing product)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Created a new order with no existing product Status code: 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"user_id\": 13,\r\n  \"product_id\": 100,\r\n  \"quantity\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{y_url}}orders",
							"host": [
								"{{y_url}}orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Orders TC#4 - Negative TestCase (Create order without Required Field.)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Required Fields with status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"user_id\": null,\r\n  \"product_id\": null,\r\n  \"quantity\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{y_url}}orders",
							"host": [
								"{{y_url}}orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Orders TC#5 - Negative TestCase (Create order with invalid format data)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Created orders with invalid data with status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"user_id\": \"abc\",\r\n  \"product_id\": \"abc\",\r\n  \"quantity\": \"abc\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{y_url}}orders",
							"host": [
								"{{y_url}}orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Orders TC#6 - Negative TestCase (Create order with invalid  user id)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create order with invalid userid with Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"user_id\": 1300,\r\n  \"product_id\": 15,\r\n  \"quantity\": 10\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{y_url}}orders",
							"host": [
								"{{y_url}}orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Orders TC#7 - Positive TestCase (Get all Created Orders.)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get All Created Orders with status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{y_url}}orders",
							"host": [
								"{{y_url}}orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Orders TC#8 - Positive TestCase (Get Created Order by id.)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get Order by id with status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{y_url}}orders/1",
							"host": [
								"{{y_url}}orders"
							],
							"path": [
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Order TC#9 - Negative TestCase (Get Created Order by invalid id)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get All Created Order with status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{y_url}}orders/ad",
							"host": [
								"{{y_url}}orders"
							],
							"path": [
								"ad"
							]
						}
					},
					"response": []
				},
				{
					"name": "Order TC#10 - Negative TestCase (Delete order with invalid data)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete order with invalid id with Status code: 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{y_url}}orders/ab",
							"host": [
								"{{y_url}}orders"
							],
							"path": [
								"ab"
							]
						}
					},
					"response": []
				},
				{
					"name": "Order TC#11 - Positive TestCase (Delete order with valid data)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete order with Status code: 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{y_url}}orders/8",
							"host": [
								"{{y_url}}orders"
							],
							"path": [
								"8"
							]
						}
					},
					"response": []
				},
				{
					"name": "Order TC#12 - Negative TestCase (Delete order with invalid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete order with invalid orderid with Status code: 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{y_url}}users/8",
							"host": [
								"{{y_url}}users"
							],
							"path": [
								"8"
							]
						}
					},
					"response": []
				},
				{
					"name": "Order TC#13 - Integration Scenario TestCase (Get Created Order by id.)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get orders by id with status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{y_url}}orders/{{order_id}}",
							"host": [
								"{{y_url}}orders"
							],
							"path": [
								"{{order_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Order TC#14 - Integration ScenarioTestCase (Delete order with valid orderid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete order with Status code: 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{y_url}}orders/{{order_id}}",
							"host": [
								"{{y_url}}orders"
							],
							"path": [
								"{{order_id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}